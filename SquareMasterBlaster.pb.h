// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SquareMasterBlaster.proto

#ifndef PROTOBUF_SquareMasterBlaster_2eproto__INCLUDED
#define PROTOBUF_SquareMasterBlaster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SquareMasterBlaster_2eproto();
void protobuf_AssignDesc_SquareMasterBlaster_2eproto();
void protobuf_ShutdownFile_SquareMasterBlaster_2eproto();

class Player;
class Player_Character;
class Game;

enum Player_charName {
  Player_charName_Wilfred = 1,
  Player_charName_James = 2,
  Player_charName_Bridget = 3,
  Player_charName_Doge = 4,
  Player_charName_Moad = 5
};
bool Player_charName_IsValid(int value);
const Player_charName Player_charName_charName_MIN = Player_charName_Wilfred;
const Player_charName Player_charName_charName_MAX = Player_charName_Moad;
const int Player_charName_charName_ARRAYSIZE = Player_charName_charName_MAX + 1;

const ::google::protobuf::EnumDescriptor* Player_charName_descriptor();
inline const ::std::string& Player_charName_Name(Player_charName value) {
  return ::google::protobuf::internal::NameOfEnum(
    Player_charName_descriptor(), value);
}
inline bool Player_charName_Parse(
    const ::std::string& name, Player_charName* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Player_charName>(
    Player_charName_descriptor(), name, value);
}
// ===================================================================

class Player_Character : public ::google::protobuf::Message {
 public:
  Player_Character();
  virtual ~Player_Character();

  Player_Character(const Player_Character& from);

  inline Player_Character& operator=(const Player_Character& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player_Character& default_instance();

  void Swap(Player_Character* other);

  // implements Message ----------------------------------------------

  Player_Character* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player_Character& from);
  void MergeFrom(const Player_Character& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required .Player.charName name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline ::Player_charName name() const;
  inline void set_name(::Player_charName value);

  // required int32 remaininghealth = 4;
  inline bool has_remaininghealth() const;
  inline void clear_remaininghealth();
  static const int kRemaininghealthFieldNumber = 4;
  inline ::google::protobuf::int32 remaininghealth() const;
  inline void set_remaininghealth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Player.Character)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_remaininghealth();
  inline void clear_has_remaininghealth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  int name_;
  ::google::protobuf::int32 remaininghealth_;
  friend void  protobuf_AddDesc_SquareMasterBlaster_2eproto();
  friend void protobuf_AssignDesc_SquareMasterBlaster_2eproto();
  friend void protobuf_ShutdownFile_SquareMasterBlaster_2eproto();

  void InitAsDefaultInstance();
  static Player_Character* default_instance_;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Player_Character Character;

  typedef Player_charName charName;
  static const charName Wilfred = Player_charName_Wilfred;
  static const charName James = Player_charName_James;
  static const charName Bridget = Player_charName_Bridget;
  static const charName Doge = Player_charName_Doge;
  static const charName Moad = Player_charName_Moad;
  static inline bool charName_IsValid(int value) {
    return Player_charName_IsValid(value);
  }
  static const charName charName_MIN =
    Player_charName_charName_MIN;
  static const charName charName_MAX =
    Player_charName_charName_MAX;
  static const int charName_ARRAYSIZE =
    Player_charName_charName_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  charName_descriptor() {
    return Player_charName_descriptor();
  }
  static inline const ::std::string& charName_Name(charName value) {
    return Player_charName_Name(value);
  }
  static inline bool charName_Parse(const ::std::string& name,
      charName* value) {
    return Player_charName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Player.Character characters = 1;
  inline int characters_size() const;
  inline void clear_characters();
  static const int kCharactersFieldNumber = 1;
  inline const ::Player_Character& characters(int index) const;
  inline ::Player_Character* mutable_characters(int index);
  inline ::Player_Character* add_characters();
  inline const ::google::protobuf::RepeatedPtrField< ::Player_Character >&
      characters() const;
  inline ::google::protobuf::RepeatedPtrField< ::Player_Character >*
      mutable_characters();

  // @@protoc_insertion_point(class_scope:Player)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Player_Character > characters_;
  friend void  protobuf_AddDesc_SquareMasterBlaster_2eproto();
  friend void protobuf_AssignDesc_SquareMasterBlaster_2eproto();
  friend void protobuf_ShutdownFile_SquareMasterBlaster_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class Game : public ::google::protobuf::Message {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();

  void Swap(Game* other);

  // implements Message ----------------------------------------------

  Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Player player1 = 1;
  inline bool has_player1() const;
  inline void clear_player1();
  static const int kPlayer1FieldNumber = 1;
  inline const ::Player& player1() const;
  inline ::Player* mutable_player1();
  inline ::Player* release_player1();
  inline void set_allocated_player1(::Player* player1);

  // required .Player player2 = 2;
  inline bool has_player2() const;
  inline void clear_player2();
  static const int kPlayer2FieldNumber = 2;
  inline const ::Player& player2() const;
  inline ::Player* mutable_player2();
  inline ::Player* release_player2();
  inline void set_allocated_player2(::Player* player2);

  // @@protoc_insertion_point(class_scope:Game)
 private:
  inline void set_has_player1();
  inline void clear_has_player1();
  inline void set_has_player2();
  inline void clear_has_player2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Player* player1_;
  ::Player* player2_;
  friend void  protobuf_AddDesc_SquareMasterBlaster_2eproto();
  friend void protobuf_AssignDesc_SquareMasterBlaster_2eproto();
  friend void protobuf_ShutdownFile_SquareMasterBlaster_2eproto();

  void InitAsDefaultInstance();
  static Game* default_instance_;
};
// ===================================================================


// ===================================================================

// Player_Character

// required int32 x = 1;
inline bool Player_Character::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player_Character::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player_Character::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player_Character::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Player_Character::x() const {
  // @@protoc_insertion_point(field_get:Player.Character.x)
  return x_;
}
inline void Player_Character::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Player.Character.x)
}

// required int32 y = 2;
inline bool Player_Character::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player_Character::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player_Character::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player_Character::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Player_Character::y() const {
  // @@protoc_insertion_point(field_get:Player.Character.y)
  return y_;
}
inline void Player_Character::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Player.Character.y)
}

// required .Player.charName name = 3;
inline bool Player_Character::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player_Character::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player_Character::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player_Character::clear_name() {
  name_ = 1;
  clear_has_name();
}
inline ::Player_charName Player_Character::name() const {
  // @@protoc_insertion_point(field_get:Player.Character.name)
  return static_cast< ::Player_charName >(name_);
}
inline void Player_Character::set_name(::Player_charName value) {
  assert(::Player_charName_IsValid(value));
  set_has_name();
  name_ = value;
  // @@protoc_insertion_point(field_set:Player.Character.name)
}

// required int32 remaininghealth = 4;
inline bool Player_Character::has_remaininghealth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player_Character::set_has_remaininghealth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player_Character::clear_has_remaininghealth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player_Character::clear_remaininghealth() {
  remaininghealth_ = 0;
  clear_has_remaininghealth();
}
inline ::google::protobuf::int32 Player_Character::remaininghealth() const {
  // @@protoc_insertion_point(field_get:Player.Character.remaininghealth)
  return remaininghealth_;
}
inline void Player_Character::set_remaininghealth(::google::protobuf::int32 value) {
  set_has_remaininghealth();
  remaininghealth_ = value;
  // @@protoc_insertion_point(field_set:Player.Character.remaininghealth)
}

// -------------------------------------------------------------------

// Player

// repeated .Player.Character characters = 1;
inline int Player::characters_size() const {
  return characters_.size();
}
inline void Player::clear_characters() {
  characters_.Clear();
}
inline const ::Player_Character& Player::characters(int index) const {
  // @@protoc_insertion_point(field_get:Player.characters)
  return characters_.Get(index);
}
inline ::Player_Character* Player::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:Player.characters)
  return characters_.Mutable(index);
}
inline ::Player_Character* Player::add_characters() {
  // @@protoc_insertion_point(field_add:Player.characters)
  return characters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Player_Character >&
Player::characters() const {
  // @@protoc_insertion_point(field_list:Player.characters)
  return characters_;
}
inline ::google::protobuf::RepeatedPtrField< ::Player_Character >*
Player::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:Player.characters)
  return &characters_;
}

// -------------------------------------------------------------------

// Game

// required .Player player1 = 1;
inline bool Game::has_player1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game::set_has_player1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game::clear_has_player1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game::clear_player1() {
  if (player1_ != NULL) player1_->::Player::Clear();
  clear_has_player1();
}
inline const ::Player& Game::player1() const {
  // @@protoc_insertion_point(field_get:Game.player1)
  return player1_ != NULL ? *player1_ : *default_instance_->player1_;
}
inline ::Player* Game::mutable_player1() {
  set_has_player1();
  if (player1_ == NULL) player1_ = new ::Player;
  // @@protoc_insertion_point(field_mutable:Game.player1)
  return player1_;
}
inline ::Player* Game::release_player1() {
  clear_has_player1();
  ::Player* temp = player1_;
  player1_ = NULL;
  return temp;
}
inline void Game::set_allocated_player1(::Player* player1) {
  delete player1_;
  player1_ = player1;
  if (player1) {
    set_has_player1();
  } else {
    clear_has_player1();
  }
  // @@protoc_insertion_point(field_set_allocated:Game.player1)
}

// required .Player player2 = 2;
inline bool Game::has_player2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game::set_has_player2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game::clear_has_player2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game::clear_player2() {
  if (player2_ != NULL) player2_->::Player::Clear();
  clear_has_player2();
}
inline const ::Player& Game::player2() const {
  // @@protoc_insertion_point(field_get:Game.player2)
  return player2_ != NULL ? *player2_ : *default_instance_->player2_;
}
inline ::Player* Game::mutable_player2() {
  set_has_player2();
  if (player2_ == NULL) player2_ = new ::Player;
  // @@protoc_insertion_point(field_mutable:Game.player2)
  return player2_;
}
inline ::Player* Game::release_player2() {
  clear_has_player2();
  ::Player* temp = player2_;
  player2_ = NULL;
  return temp;
}
inline void Game::set_allocated_player2(::Player* player2) {
  delete player2_;
  player2_ = player2;
  if (player2) {
    set_has_player2();
  } else {
    clear_has_player2();
  }
  // @@protoc_insertion_point(field_set_allocated:Game.player2)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Player_charName> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Player_charName>() {
  return ::Player_charName_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SquareMasterBlaster_2eproto__INCLUDED
