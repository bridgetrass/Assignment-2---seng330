// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SquareMasterBlaster.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SquareMasterBlaster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_Character_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_Character_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Player_charName_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SquareMasterBlaster_2eproto() {
  protobuf_AddDesc_SquareMasterBlaster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SquareMasterBlaster.proto");
  GOOGLE_CHECK(file != NULL);
  Player_descriptor_ = file->message_type(0);
  static const int Player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, characters_),
  };
  Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player));
  Player_Character_descriptor_ = Player_descriptor_->nested_type(0);
  static const int Player_Character_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_Character, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_Character, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_Character, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_Character, remaininghealth_),
  };
  Player_Character_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_Character_descriptor_,
      Player_Character::default_instance_,
      Player_Character_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_Character, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player_Character, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player_Character));
  Player_charName_descriptor_ = Player_descriptor_->enum_type(0);
  Game_descriptor_ = file->message_type(1);
  static const int Game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player2_),
  };
  Game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game_descriptor_,
      Game::default_instance_,
      Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SquareMasterBlaster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_Character_descriptor_, &Player_Character::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game_descriptor_, &Game::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SquareMasterBlaster_2eproto() {
  delete Player::default_instance_;
  delete Player_reflection_;
  delete Player_Character::default_instance_;
  delete Player_Character_reflection_;
  delete Game::default_instance_;
  delete Game_reflection_;
}

void protobuf_AddDesc_SquareMasterBlaster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031SquareMasterBlaster.proto\"\320\001\n\006Player\022%"
    "\n\ncharacters\030\001 \003(\0132\021.Player.Character\032Z\n"
    "\tCharacter\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\036\n\004name"
    "\030\003 \002(\0162\020.Player.charName\022\027\n\017remaininghea"
    "lth\030\004 \002(\005\"C\n\010charName\022\013\n\007Wilfred\020\001\022\t\n\005Ja"
    "mes\020\002\022\013\n\007Bridget\020\003\022\010\n\004Doge\020\004\022\010\n\004Moad\020\005\":"
    "\n\004Game\022\030\n\007player1\030\001 \002(\0132\007.Player\022\030\n\007play"
    "er2\030\002 \002(\0132\007.Player", 298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SquareMasterBlaster.proto", &protobuf_RegisterTypes);
  Player::default_instance_ = new Player();
  Player_Character::default_instance_ = new Player_Character();
  Game::default_instance_ = new Game();
  Player::default_instance_->InitAsDefaultInstance();
  Player_Character::default_instance_->InitAsDefaultInstance();
  Game::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SquareMasterBlaster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SquareMasterBlaster_2eproto {
  StaticDescriptorInitializer_SquareMasterBlaster_2eproto() {
    protobuf_AddDesc_SquareMasterBlaster_2eproto();
  }
} static_descriptor_initializer_SquareMasterBlaster_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Player_charName_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_charName_descriptor_;
}
bool Player_charName_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Player_charName Player::Wilfred;
const Player_charName Player::James;
const Player_charName Player::Bridget;
const Player_charName Player::Doge;
const Player_charName Player::Moad;
const Player_charName Player::charName_MIN;
const Player_charName Player::charName_MAX;
const int Player::charName_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Player_Character::kXFieldNumber;
const int Player_Character::kYFieldNumber;
const int Player_Character::kNameFieldNumber;
const int Player_Character::kRemaininghealthFieldNumber;
#endif  // !_MSC_VER

Player_Character::Player_Character()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Player.Character)
}

void Player_Character::InitAsDefaultInstance() {
}

Player_Character::Player_Character(const Player_Character& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Player.Character)
}

void Player_Character::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  name_ = 1;
  remaininghealth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player_Character::~Player_Character() {
  // @@protoc_insertion_point(destructor:Player.Character)
  SharedDtor();
}

void Player_Character::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player_Character::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player_Character::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_Character_descriptor_;
}

const Player_Character& Player_Character::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SquareMasterBlaster_2eproto();
  return *default_instance_;
}

Player_Character* Player_Character::default_instance_ = NULL;

Player_Character* Player_Character::New() const {
  return new Player_Character;
}

void Player_Character::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Player_Character*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(x_, y_);
    name_ = 1;
    remaininghealth_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player_Character::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Player.Character)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_name;
        break;
      }

      // required .Player.charName name = 3;
      case 3: {
        if (tag == 24) {
         parse_name:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Player_charName_IsValid(value)) {
            set_name(static_cast< ::Player_charName >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remaininghealth;
        break;
      }

      // required int32 remaininghealth = 4;
      case 4: {
        if (tag == 32) {
         parse_remaininghealth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaininghealth_)));
          set_has_remaininghealth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Player.Character)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Player.Character)
  return false;
#undef DO_
}

void Player_Character::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Player.Character)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required .Player.charName name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->name(), output);
  }

  // required int32 remaininghealth = 4;
  if (has_remaininghealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remaininghealth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Player.Character)
}

::google::protobuf::uint8* Player_Character::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.Character)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required .Player.charName name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->name(), target);
  }

  // required int32 remaininghealth = 4;
  if (has_remaininghealth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remaininghealth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.Character)
  return target;
}

int Player_Character::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required .Player.charName name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
    }

    // required int32 remaininghealth = 4;
    if (has_remaininghealth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaininghealth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player_Character::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player_Character* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player_Character*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player_Character::MergeFrom(const Player_Character& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_remaininghealth()) {
      set_remaininghealth(from.remaininghealth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player_Character::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_Character::CopyFrom(const Player_Character& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Character::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Player_Character::Swap(Player_Character* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(name_, other->name_);
    std::swap(remaininghealth_, other->remaininghealth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player_Character::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_Character_descriptor_;
  metadata.reflection = Player_Character_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Player::kCharactersFieldNumber;
#endif  // !_MSC_VER

Player::Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Player)
}

void Player::InitAsDefaultInstance() {
}

Player::Player(const Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Player)
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:Player)
  SharedDtor();
}

void Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SquareMasterBlaster_2eproto();
  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New() const {
  return new Player;
}

void Player::Clear() {
  characters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Player.Character characters = 1;
      case 1: {
        if (tag == 10) {
         parse_characters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_characters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_characters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Player)
  // repeated .Player.Character characters = 1;
  for (int i = 0; i < this->characters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->characters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Player)
}

::google::protobuf::uint8* Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player)
  // repeated .Player.Character characters = 1;
  for (int i = 0; i < this->characters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->characters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player)
  return target;
}

int Player::ByteSize() const {
  int total_size = 0;

  // repeated .Player.Character characters = 1;
  total_size += 1 * this->characters_size();
  for (int i = 0; i < this->characters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->characters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  characters_.MergeFrom(from.characters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->characters())) return false;
  return true;
}

void Player::Swap(Player* other) {
  if (other != this) {
    characters_.Swap(&other->characters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game::kPlayer1FieldNumber;
const int Game::kPlayer2FieldNumber;
#endif  // !_MSC_VER

Game::Game()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Game)
}

void Game::InitAsDefaultInstance() {
  player1_ = const_cast< ::Player*>(&::Player::default_instance());
  player2_ = const_cast< ::Player*>(&::Player::default_instance());
}

Game::Game(const Game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Game)
}

void Game::SharedCtor() {
  _cached_size_ = 0;
  player1_ = NULL;
  player2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game::~Game() {
  // @@protoc_insertion_point(destructor:Game)
  SharedDtor();
}

void Game::SharedDtor() {
  if (this != default_instance_) {
    delete player1_;
    delete player2_;
  }
}

void Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game_descriptor_;
}

const Game& Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SquareMasterBlaster_2eproto();
  return *default_instance_;
}

Game* Game::default_instance_ = NULL;

Game* Game::New() const {
  return new Game;
}

void Game::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_player1()) {
      if (player1_ != NULL) player1_->::Player::Clear();
    }
    if (has_player2()) {
      if (player2_ != NULL) player2_->::Player::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Player player1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player2;
        break;
      }

      // required .Player player2 = 2;
      case 2: {
        if (tag == 18) {
         parse_player2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Game)
  return false;
#undef DO_
}

void Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Game)
  // required .Player player1 = 1;
  if (has_player1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player1(), output);
  }

  // required .Player player2 = 2;
  if (has_player2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Game)
}

::google::protobuf::uint8* Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Game)
  // required .Player player1 = 1;
  if (has_player1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player1(), target);
  }

  // required .Player player2 = 2;
  if (has_player2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Game)
  return target;
}

int Game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Player player1 = 1;
    if (has_player1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player1());
    }

    // required .Player player2 = 2;
    if (has_player2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game::MergeFrom(const Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player1()) {
      mutable_player1()->::Player::MergeFrom(from.player1());
    }
    if (from.has_player2()) {
      mutable_player2()->::Player::MergeFrom(from.player2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game::CopyFrom(const Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player1()) {
    if (!this->player1().IsInitialized()) return false;
  }
  if (has_player2()) {
    if (!this->player2().IsInitialized()) return false;
  }
  return true;
}

void Game::Swap(Game* other) {
  if (other != this) {
    std::swap(player1_, other->player1_);
    std::swap(player2_, other->player2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game_descriptor_;
  metadata.reflection = Game_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
